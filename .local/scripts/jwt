#!/usr/bin/env python3
# source: https://github.com/s0rg/dotfiles
#
# JWT decoder
#

import sys
import argparse
import json
from base64 import urlsafe_b64decode
from datetime import datetime

from pygments import highlight, lexers, formatters

from colors import (
    gray,
    red,
    green,
)

lexer = lexers.JsonLexer()
tform = formatters.TerminalFormatter()

parser = argparse.ArgumentParser(description="JWT-tokens decoder")
parser.add_argument("-s",
                    "--sign",
                    action="store_true",
                    help="show signature block")
parser.add_argument("input", nargs='?', help="JWT to decode")


def fancy_json(raw):
    v = json.dumps(raw, sort_keys=True, indent=4)
    return highlight(v, lexer, tform)


def decode(p):
    return urlsafe_b64decode(p + "==")


def main():
    args = parser.parse_args()

    val = args.input
    if val is None:
        val = sys.stdin.read().strip()

    parts = val.split(".")
    if len(parts) != 3:
        print("malformed jwt!", file=sys.stderr)
        return 1

    raw = json.loads(decode(parts[0]))
    if raw.get("typ", "") != "JWT":
        print("non-jwt!", file=sys.stderr)
        return 1

    algstr = raw["alg"]

    raw = json.loads(decode(parts[1]))
    exp = datetime.utcfromtimestamp(raw["exp"])
    expstr = exp.strftime("%Y-%m-%d %H:%M:%S UTC")

    color = green if exp > datetime.utcnow() else red

    print("\n---")
    print(fancy_json(raw))
    print(gray("expire at") + ": " + color(expstr, True))
    print(gray("algorithm") + ": " + green(algstr))

    if args.sign:
        sig = decode(parts[2]).hex()
        print(gray("signature") + ": " + green(sig))
        print()

    print("---\n")

    return 0


if __name__ == '__main__':
    sys.exit(main())

#vim:ft=py3
