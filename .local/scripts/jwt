#!/usr/bin/env python3
# source: https://github.com/s0rg/dotfiles
#
# JWT decoder
#

import argparse
import json
import sys
from base64 import urlsafe_b64decode
from datetime import datetime

from pygments import formatters, highlight, lexers

from term_colors import black, green, red

# pylint: disable=no-member
lexer = lexers.JsonLexer()
tform = formatters.TerminalFormatter()

parser = argparse.ArgumentParser(description="JWT decoder")
parser.add_argument(
    "-r",
    "--raw",
    action="store_true",
    help="show only body",
)
parser.add_argument(
    "-s",
    "--sign",
    action="store_true",
    help="show signature block",
)
parser.add_argument(
    "input",
    nargs='?',
    help="JWT to decode",
)


def highlight_json(raw):
    v = json.dumps(raw, sort_keys=True, indent=4)
    return highlight(v, lexer, tform)


def url_b64(p):
    return urlsafe_b64decode(p + "==")


def decode_jwt(val):
    parts = val.split(".")
    if len(parts) != 3:
        raise ValueError("wrong number of parts")

    raw = json.loads(url_b64(parts[0]))
    if raw.get("typ", "") != "JWT":
        raise ValueError("not JWT type")

    return (
        raw["alg"],
        url_b64(parts[1]),
        url_b64(parts[2]),
    )


def main():
    args = parser.parse_args()

    val = args.input
    if val is None:
        val = sys.stdin.read().strip()

    try:
        alg, body, sign = decode_jwt(val)
    except ValueError as ex:
        print(ex)
        return 1

    if args.raw:
        print(body.decode("utf8"))
        return 0

    raw = json.loads(body)
    dexp = datetime.utcfromtimestamp(raw["exp"])
    exp = dexp.strftime("%Y-%m-%d %H:%M:%S UTC")

    clr, stt = red, "expired"
    if dexp > datetime.utcnow():
        clr, stt = green, "valid"

    sexp = clr(exp) + " " + clr(stt, True)

    print(black("INFO") + ": " + green(alg) + " " + sexp)
    print(black("BODY") + ": " + highlight_json(raw))

    if args.sign:
        print(black("SIGN") + ": " + green(sign.hex()))

    print()

    return 0


if __name__ == '__main__':
    sys.exit(main())

#vim:ft=py3
