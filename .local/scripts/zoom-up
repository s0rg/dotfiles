#!/usr/bin/env python3

import os

import requests
import xdg

CHUNK_SIZE = 65536
XDG_USER_DIRS = 'user-dirs.dirs'
VERSION_CACHE = 'zoom.up.ver'
VERSION_REST = 'https://zoom.us/rest/download?os=linux'
DOWNLOAD_URI_TPL = 'https://zoom.us/client/{}/zoom_amd64.deb'
DOWNLOAD_OUT_TPL = 'zoom_amd64_{}.deb'


def sizeof_fmt(num, suffix="B"):
    for unit in ["", "Ki", "Mi", "Gi", "Ti", "Pi", "Ei", "Zi"]:
        if abs(num) < 1024.0:
            return f"{num:3.1f}{unit}{suffix}"
        num /= 1024.0
    return f"{num:.1f}Yi{suffix}"


def need_update(version):
    target = os.path.join(
        xdg.xdg_cache_home(),
        VERSION_CACHE,
    )

    curr = ""

    if os.path.exists(target):
        with open(target, "r") as fd:
            curr = fd.read().strip()

    if curr == version:
        return False

    with open(target, "w") as fd:
        fd.write(version)
        fd.flush()
        return True


def download(version, store):
    uri = DOWNLOAD_URI_TPL.format(version)
    rv = requests.get(uri, stream=True)
    rv.raise_for_status()

    total = int(rv.headers["content-length"])
    totals = sizeof_fmt(total)
    curr = 0

    print(f"downloading {uri} to {store}: ")

    result = os.path.join(store, DOWNLOAD_OUT_TPL.format(version))

    with open(result, 'wb') as fd:
        for chunk in rv.iter_content(chunk_size=CHUNK_SIZE):
            fd.write(chunk)
            curr += len(chunk)
            currs = sizeof_fmt(curr)
            print(f"{currs} of {totals} {curr/total:.0%}",
                  end='\r',
                  flush=True)

    print(f"{result} saved")


def get_xdg_dirs():
    root = xdg.xdg_config_home()
    res = {}
    with open(os.path.join(root, XDG_USER_DIRS)) as fd:
        for ln in fd:
            if ln.startswith("#"):
                continue
            ln = ln.strip()
            if not ln:
                continue

            key, path = ln.split("=")
            res[key] = os.path.expandvars(path).strip('"')

    return res


def main():
    rv = requests.get(VERSION_REST)
    rv.raise_for_status()

    data = rv.json()
    if not data["status"]:
        print("empty or false status")
        return

    errc = data.get("errorCode", 666)
    if errc != 0:
        print("non-zero or empty errorCode: ", errc)
        return

    ver = data.get("result", {}).\
             get("downloadVO", {}).\
             get("zoom", {}).\
             get("version")

    if not ver:
        print("empty version data")
        return

    if not need_update(ver):
        print(f"zoom {ver} is up-to-date!")
        return

    print(f"dowloading new version: {ver}")

    xdirs = get_xdg_dirs()
    download(ver, xdirs["XDG_DOWNLOAD_DIR"])

    return


main()
